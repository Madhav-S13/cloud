package org.cloudbus.cloudsim.examples;

import org.cloudbus.cloudsim.*;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.*;

import java.util.*;

public class EconomicBasedScheduling_2 {
    public static void main(String[] args) {
        try {
            CloudSim.init(1, Calendar.getInstance(), false);

            Datacenter datacenter = createDatacenter("Datacenter_0");
            DatacenterBroker broker = new DatacenterBroker("Broker_0");
            int brokerId = broker.getId();

            List<Vm> vmList = new ArrayList<>();
            for (int i = 0; i < 3; i++)
                vmList.add(new Vm(i, brokerId, 1000, 1, 2048, 10000, 100000, "Xen", new CloudletSchedulerTimeShared()));
            broker.submitVmList(vmList);

            List<Cloudlet> cloudletList = new ArrayList<>();
            double[] cost = new double[5];
            for (int i = 0; i < 5; i++) {
                int length = 1000 + (int)(Math.random() * 4000);
                cost[i] = 0.05 + Math.random() * 0.1;
                Cloudlet c = new Cloudlet(i, length, 1, 300, 300,
                        new UtilizationModelFull(), new UtilizationModelFull(), new UtilizationModelFull());
                c.setUserId(brokerId);
                cloudletList.add(c);
            }

            cloudletList.sort(Comparator.comparingDouble(c -> cost[c.getCloudletId()] / c.getCloudletLength()));
            for (int i = 0; i < cloudletList.size(); i++)
                cloudletList.get(i).setVmId(vmList.get(i % vmList.size()).getId());

            System.out.println("Cloudlet Execution Order (Economic-SJF):");
            for (Cloudlet c : cloudletList)
                System.out.printf("Cloudlet %d - Length: %d, Cost: %.4f, VM: %d%n",
                        c.getCloudletId(), c.getCloudletLength(), cost[c.getCloudletId()], c.getVmId());

            broker.submitCloudletList(cloudletList);
            CloudSim.startSimulation();
            List<Cloudlet> newList = broker.getCloudletReceivedList();
            CloudSim.stopSimulation();

            System.out.println("\n========== OUTPUT ==========");
            System.out.println("Cloudlet ID\tSTATUS\tDatacenter ID\tVM ID\tTime\tStart\tFinish");
            for (Cloudlet c : newList)
                System.out.printf("%d\t\tSUCCESS\t\t%d\t\t%d\t%.2f\t%.2f\t%.2f%n",
                        c.getCloudletId(), c.getResourceId(), c.getVmId(),
                        c.getActualCPUTime(), c.getExecStartTime(), c.getFinishTime());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Datacenter createDatacenter(String name) {
        List<Pe> peList = List.of(new Pe(0, new PeProvisionerSimple(1000)));
        List<Host> hostList = List.of(new Host(0, new RamProvisionerSimple(4096),
                new BwProvisionerSimple(10000), 100000, peList, new VmSchedulerTimeShared(peList)));

        DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
                "x86", "Linux", "Xen", hostList, 10.0,
                3.0, 0.05, 0.001, 0.02);

        try {
            return new Datacenter(name, characteristics, new VmAllocationPolicySimple(hostList), new ArrayList<>(), 0);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}

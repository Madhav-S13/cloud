package org.cloudbus.cloudsim.examples;

import org.cloudbus.cloudsim.*;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.*;

import java.util.*;

public class CloudQueuingModels {
    public static void main(String[] args) {
        try {
            for (int method = 1; method <= 3; method++) {
                System.out.println("\nRunning Simulation for Scheduling Method: " + method);
                CloudSim.init(1, Calendar.getInstance(), false);

                Datacenter datacenter = createDatacenter("Datacenter_0");
                DatacenterBroker broker = new DatacenterBroker("Broker_" + method);
                int brokerId = broker.getId();

                List<Vm> vms = new ArrayList<>();
                for (int i = 0; i < 3; i++)
                    vms.add(new Vm(i, brokerId, 1000, 1, 2048, 10000, 100000, "Xen", new CloudletSchedulerTimeShared()));
                broker.submitVmList(vms);

                List<Cloudlet> cloudlets = new ArrayList<>();
                Random rand = new Random();
                for (int i = 0; i < 5; i++) {
                    Cloudlet cl = new Cloudlet(i, 1000 + rand.nextInt(4000), 1, 300, 300,
                            new UtilizationModelFull(), new UtilizationModelFull(), new UtilizationModelFull());
                    cl.setUserId(brokerId);
                    cloudlets.add(cl);
                }

                runSimulation(cloudlets, vms, broker, method);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void runSimulation(List<Cloudlet> cloudlets, List<Vm> vms, DatacenterBroker broker, int method) {
        System.out.println(switch (method) {
            case 1 -> "Applying First-Come, First-Served (FCFS)";
            case 2 -> "Applying Shortest Job First (SJF)";
            case 3 -> "Applying Round Robin Scheduling";
            default -> "Unknown";
        });

        if (method == 2)
            cloudlets.sort(Comparator.comparingLong(Cloudlet::getCloudletLength));

        if (method != 3) {
            for (int i = 0; i < cloudlets.size(); i++)
                cloudlets.get(i).setVmId(vms.get(i % vms.size()).getId());
        } else {
            for (int i = 0, j = 0; i < cloudlets.size(); i++, j = (j + 1) % vms.size())
                cloudlets.get(i).setVmId(vms.get(j).getId());
        }

        broker.submitCloudletList(cloudlets);
        CloudSim.startSimulation();
        List<Cloudlet> results = broker.getCloudletReceivedList();
        CloudSim.stopSimulation();
        printResults(results, method);
    }

    private static Datacenter createDatacenter(String name) throws Exception {
        List<Pe> peList = List.of(new Pe(0, new PeProvisionerSimple(1000)));
        List<Host> hosts = List.of(new Host(0, new RamProvisionerSimple(4096),
                new BwProvisionerSimple(10000), 100000, peList, new VmSchedulerTimeShared(peList)));

        DatacenterCharacteristics ch = new DatacenterCharacteristics(
                "x86", "Linux", "Xen", hosts, 10.0, 3.0, 0.05, 0.001, 0.02);
        return new Datacenter(name, ch, new VmAllocationPolicySimple(hosts), new ArrayList<>(), 0);
    }

    private static void printResults(List<Cloudlet> cloudlets, int method) {
        System.out.println("\n========== OUTPUT FOR SCHEDULING METHOD " + method + " ==========");
        System.out.printf("%-12s %-8s %-15s %-6s %-8s %-12s %-12s%n",
                "Cloudlet ID", "STATUS", "Data center ID", "VM ID", "Time", "Start Time", "Finish Time");

        for (Cloudlet c : cloudlets)
            System.out.printf("%-12d %-8s %-15d %-6d %-8.2f %-12.2f %-12.2f%n",
                    c.getCloudletId(), "SUCCESS", c.getResourceId(), c.getVmId(),
                    c.getActualCPUTime(), c.getExecStartTime(), c.getFinishTime());
    }
}
